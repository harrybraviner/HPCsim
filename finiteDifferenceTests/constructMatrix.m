function A = constructMatrix(physicalNodes, computationalNodes, deltax, deltat, b, a, a0)
    %u_t + au_x +a0 u_x = b u_xx
    %a central difference advection
    %a0 upwinding difference advection
    n = physicalNodes;
    N = computationalNodes;
    
    %Construct stencil for chosen equation
    alpha = b*deltat/deltax^2; %central difference diffusion
    beta = a*deltat/deltax; %central difference advection
    gamma = a0*deltat/deltax; %left-hadn differnece advection
    stencil = [alpha-beta/2 + gamma, 1 - 2*alpha - gamma, alpha+beta/2];

    %loop through each computational node to write the stencil in each cell, divided by swap matrix
    npN = ceil(n/N); %physical nodes per computational node
    A(1,1:2) = stencil(2:end);
    for j=2:npN
        A(j,j-1:j+1) = stencil;
    end
    for i=(1:N-1)
        topCorner = npN + (npN+2)*(i-1) + 1;
        A(topCorner:topCorner+1, topCorner-1:topCorner+2) =  [0,0,0,1;1,0,0,0];%Swap matrix
        for j=topCorner+1+(1:npN)
            A(j,j-1:j+1) = stencil;
        end
    end

    %Cut off excess cells automatically generated by matlab array allocation
    A=A(1:physicalNodes+2*(computationalNodes-1),1:physicalNodes+2*(computationalNodes-1));
    %Apply dirichlet conditions at ends
    A(1,:) = 0;
    A(1,1) = 1;
    A(end,:) = 0;
    A(end,end) = 1;
end
